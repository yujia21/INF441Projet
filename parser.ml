type token =
  | LPAR
  | RPAR
  | EQ
  | COMMA
  | SEQ
  | EOF
  | ADD
  | SUB
  | MUL
  | DIV
  | RAND
  | IF
  | THEN
  | ELSE
  | FLOAT of (float)
  | STRING of (string)

open Parsing;;
# 2 "parser.mly"
  open Language
# 23 "parser.ml"
let yytransl_const = [|
  257 (* LPAR *);
  258 (* RPAR *);
  259 (* EQ *);
  260 (* COMMA *);
  261 (* SEQ *);
    0 (* EOF *);
  262 (* ADD *);
  263 (* SUB *);
  264 (* MUL *);
  265 (* DIV *);
  266 (* RAND *);
  267 (* IF *);
  268 (* THEN *);
  269 (* ELSE *);
    0|]

let yytransl_block = [|
  270 (* FLOAT *);
  271 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\000\000"

let yylen = "\002\000\
\002\000\003\000\003\000\006\000\003\000\001\000\001\000\003\000\
\003\000\003\000\003\000\006\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\
\000\000\000\000\000\000\007\000\006\000\000\000\000\000\000\000\
\001\000\005\000\000\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\012\000"

let yydgoto = "\002\000\
\006\000\007\000\014\000"

let yysindex = "\016\000\
\255\254\000\000\255\254\001\255\000\255\000\000\004\000\022\255\
\001\255\001\255\011\255\000\000\000\000\047\255\001\255\255\254\
\000\000\000\000\035\255\000\000\001\255\001\255\001\255\001\255\
\001\255\255\254\058\255\018\255\000\000\054\255\058\255\058\255\
\254\254\254\254\017\255\001\255\255\254\043\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\000\009\000\000\000\000\000\019\000\025\000\
\001\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\002\000\011\000"

let yytablesize = 300
let yytable = "\003\000\
\010\000\009\000\015\000\017\000\008\000\024\000\025\000\010\000\
\003\000\004\000\011\000\021\000\011\000\005\000\012\000\013\000\
\001\000\028\000\008\000\019\000\020\000\016\000\016\000\018\000\
\009\000\027\000\016\000\035\000\000\000\037\000\002\000\030\000\
\031\000\032\000\033\000\034\000\029\000\000\000\039\000\000\000\
\022\000\023\000\024\000\025\000\040\000\000\000\038\000\000\000\
\022\000\023\000\024\000\025\000\022\000\023\000\024\000\025\000\
\000\000\036\000\026\000\022\000\023\000\024\000\025\000\022\000\
\023\000\024\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\010\000\010\000\010\000\010\000\
\016\000\000\000\003\000\000\000\010\000\010\000\011\000\000\000\
\011\000\011\000\011\000\011\000\008\000\003\000\008\000\008\000\
\011\000\011\000\009\000\000\000\009\000\009\000\008\000\008\000\
\002\000\000\000\000\000\002\000\009\000\009\000\000\000\000\000\
\000\000\000\000\000\000\002\000"

let yycheck = "\001\001\
\000\000\001\001\003\001\000\000\003\000\008\001\009\001\007\001\
\000\000\011\001\010\001\001\001\000\000\015\001\014\001\015\001\
\001\000\016\000\000\000\009\000\010\000\005\001\005\001\002\001\
\000\000\015\000\005\001\026\000\255\255\013\001\000\000\021\000\
\022\000\023\000\024\000\025\000\002\001\255\255\037\000\255\255\
\006\001\007\001\008\001\009\001\002\001\255\255\036\000\255\255\
\006\001\007\001\008\001\009\001\006\001\007\001\008\001\009\001\
\255\255\004\001\012\001\006\001\007\001\008\001\009\001\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\004\001\005\001\006\001\007\001\
\005\001\255\255\002\001\255\255\012\001\013\001\002\001\255\255\
\004\001\005\001\006\001\007\001\002\001\013\001\004\001\005\001\
\012\001\013\001\002\001\255\255\004\001\005\001\012\001\013\001\
\002\001\255\255\255\255\005\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\013\001"

let yynames_const = "\
  LPAR\000\
  RPAR\000\
  EQ\000\
  COMMA\000\
  SEQ\000\
  EOF\000\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  RAND\000\
  IF\000\
  THEN\000\
  ELSE\000\
  "

let yynames_block = "\
  FLOAT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prog) in
    Obj.repr(
# 22 "parser.mly"
               ( _1 )
# 191 "parser.ml"
               : Language.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 25 "parser.mly"
                     ( Assign (_1, _3) )
# 199 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 26 "parser.mly"
                    ( Seq (_1, _3) )
# 207 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 27 "parser.mly"
                                  ( If (_2, _4, _6) )
# 216 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'prog) in
    Obj.repr(
# 28 "parser.mly"
                     ( _2 )
# 223 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 31 "parser.mly"
             ( Var _1 )
# 230 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 32 "parser.mly"
            ( Float _1 )
# 237 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 33 "parser.mly"
                    ( Add (_1, _3) )
# 245 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 34 "parser.mly"
                    ( Sub (_1, _3) )
# 253 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 35 "parser.mly"
                    ( Mul (_1, _3) )
# 261 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                    ( Div (_1, _3) )
# 269 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 37 "parser.mly"
                                     ( Rand (_3, _5) )
# 277 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 38 "parser.mly"
                     ( _2 )
# 284 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 39 "parser.mly"
                            ( Sub (Float 0., _2) )
# 291 "parser.ml"
               : 'expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Language.prog)
